#!/usr/bin/env python3
# from typing import *


# def solve(e: int, k: int, a: list[int]) -> List[str]:
def solve(N, K, A):
    a = 1
    b = N * (N + 1) // 2
    for i in range(N):
        small = []
        large = []
        for j in range(i + 1, N):
            if A[i] > A[j]:
                small.append(A[j])
            else:
                large.append(A[j])
        tmp = -1
        # print(small, large)
        # print(a, b)
        if K - a < len(small):
            small.sort()
            tmp = small[K - a]
        if b - K < len(large):
            large.sort(reverse=True)
            tmp = large[b - K]
        # print(tmp)
        if tmp != -1:
            k = i
            while A[k] != tmp:
                k += 1
            # print(A[k])
            # print(A[:i], A[i:k+1], A[k+1:])
            return " ".join(list(map(str, A[:i] + list(reversed(A[i:k+1])) + A[k+1:])))
        a += len(small)
        b -= len(large)
    return " ".join(list(map(str, A)))

    # ans = []
    # li_low = []
    # li_high = []
    # A = np.array(A)
    # for i in range(N):
    #     # print(A[:i+1])
    #     li_low.append(np.count_nonzero(A[:i] < A[i]))
    #     li_high.append(np.count_nonzero(A[i+1:] > A[i]))
    # print(li_low)
    # print(li_high)
    # li = []
    # cnt = 0
    # for i in range(N):
    #     cnt += A[i] - li_low[i] - 1
    #     li.append(cnt)
    # cnt += 10
    # for i in reversed(range(N)):
    #     cnt += li_high[i]
    #     li.append(cnt)
    # print(li)
    # # exit()
    # if li[N-1] < K and li[N] > K:
    #     return " ".join(list(map(str, A)))
    # for i in reversed(range(len(li))):
    #     if li[i] <= K:
    #         ll = i
    #         break
    # print("aaaa", ll)
    # print(li[ll], K, ll % N)
    # # ind = ll % N
    # if ll > N:
    #     ind = N - (ll % N + 1) - 1
    #     li_tmp = []
    #     # print(A[ind:], A[ind])
    #     for tmp in A[ind:]:
    #         if A[ind] < tmp:
    #             li_tmp.append(tmp)
    #     li_tmp = sorted(li_tmp)
    #     # print(li_tmp)
    #     # print(K - li[ll])
    #     ch_r = li_tmp[K - li[ll] - 1]
    #     ch_r_ind = np.where(A == ch_r)[0][0]
    #     # print(ind, ch_r_ind)
    #     # print(A[:ind], list(reversed(A[ind:ch_r_ind+1])), A[ch_r_ind+1:])
    #     ans = list(A[:ind]) + list(reversed(A[ind:ch_r_ind+1])) + list(A[ch_r_ind+1:])
    #     return " ".join(list(map(str, ans)))
    # else:
    #     print("else")
    #     ind = ll + 1
    #     li_tmp = []
    #     for tmp in A[ind:]:
    #         if A[ind] > tmp:
    #             li_tmp.append(tmp)
    #     li_tmp = sorted(li_tmp)
    #     print(li_tmp)
    #     print(K - li[ll] - 1)
    #     ch_r = li_tmp[K - li[ll] - 1]
    #     ch_r_ind = np.where(A == ch_r)[0][0]
    #     # print(ind, ch_r_ind)
    #     # print(A[:ind], list(reversed(A[ind:ch_r_ind+1])), A[ch_r_ind+1:])
    #     ans = list(A[:ind]) + list(reversed(A[ind:ch_r_ind+1])) + list(A[ch_r_ind+1:])
    #     return " ".join(list(map(str, ans)))


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    K = int(next(tokens))
    A = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    assert next(tokens, None) is None
    ans = solve(N, K, A)
    print(ans)


if __name__ == '__main__':
    main()
